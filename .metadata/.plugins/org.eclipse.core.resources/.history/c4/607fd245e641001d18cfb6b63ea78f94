package cp213;

/**
 * @author Your name and id here
 * @version 2022-09-23
 */
public class Strings {
	// Constants
	public static final String VOWELS = "aeiouAEIOU";

	/**
	 * Determines if string is a "palindrome": a word, verse, or sentence (such as
	 * "Able was I ere I saw Elba") that reads the same backward or forward. Ignores
	 * case, spaces, digits, and punctuation in the string parameter s.
	 *
	 * @param string a string
	 * @return true if string is a palindrome, false otherwise
	 */
	public static boolean isPalindrome(final String string) {

		// your code here
		boolean check = true;
		String temp1 = string.replaceAll("\\s+", "").toLowerCase();
		String temp2 = temp1.replaceAll("\\p{Punct}", "");
		String temp = temp2.replaceAll("\\d", "");

		int len = temp.length();
		int start = 0;
		int end = len - 1;
		while (end > start) {
			char startchar = temp.charAt(start++);
			char endchar = temp.charAt(end--);
			if (startchar != endchar) {
				check = false;
			}
		}

		return check;
	}

	/**
	 * Determines if name is a valid Java variable name. Variables names must start
	 * with a letter or an underscore, but cannot be an underscore alone. The rest
	 * of the variable name may consist of letters, numbers and underscores.
	 *
	 * @param name a string to test as a Java variable name
	 * @return true if name is a valid Java variable name, false otherwise
	 */
	public static boolean isValid(final String name) {

		// your code here
		boolean check = true;
		if (name.length() == 1) {
			if (!(name.charAt(0) >= 'a' && name.charAt(0) <= 'z' || name.charAt(0) >= 'A' && name.charAt(0) <= 'Z')) {
				check = false;
			}
		} else {
			if (!(name.charAt(0) >= 'a' && name.charAt(0) <= 'z' || name.charAt(0) >= 'A' && name.charAt(0) <= 'Z'
					|| name.charAt(0) == '_')) {
				check = false;
			}
			for (int i = 1; i < name.length(); i++) {
				if (!(name.charAt(i) >= 'a' && name.charAt(i) <= 'z' || name.charAt(i) >= 'A' && name.charAt(i) <= 'Z'
						|| name.charAt(i) == '_' || name.charAt(i) >= '0' && name.charAt(i) <= '9')) {
					check = false;

				}
			}
		}

		return check;
	}

	/**
	 * Converts a word to Pig Latin. The conversion is:
	 * <ul>
	 * <li>if a word begins with a vowel, add "way" to the end of the word.</li>
	 * <li>if the word begins with consonants, move the leading consonants to the
	 * end of the word and add "ay" to the end of that. "y" is treated as a
	 * consonant if it is the first character in the word, and as a vowel for
	 * anywhere else in the word.</li>
	 * </ul>
	 * Preserve the case of the word - i.e. if the first character of word is
	 * upper-case, then the new first character should also be upper case.
	 *
	 * @param word The string to convert to Pig Latin
	 * @return the Pig Latin version of word
	 */
	public static String pigLatin(String word) {

		// your code here
		String latin = "";
		if (word.startsWith(VOWELS)) {
			latin = word + "way";
		}

		return latin;
	}

}
